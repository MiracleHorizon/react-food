generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String        @unique
  hashedPassword String
  role           UserRole      @default(USER)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  addresses      Address[]
  billingCards   BillingCard[]
  orders         Order[]

  @@map("users")
}

model Address {
  id           String @id @default(uuid())
  city         String
  street       String
  house        String
  entrance     Int
  floor        Int
  flatOrOffice Int
  user         User   @relation(fields: [userId], references: [id])
  userId       String

  @@map("addresses")
}

model BillingCard {
  id         String          @id @default(uuid())
  number     String
  expireDate DateTime
  cvc        Int
  type       BillingCardType @default(DEFAULT)
  user       User            @relation(fields: [userId], references: [id])
  userId     String

  @@map("billingCards")
}

model ProductCategory {
  id       String    @id @default(uuid())
  title    String    @unique
  products Product[]

  @@map("productCategories")
}

model Product {
  id                String          @id @default(uuid())
  title             String
  description       String?
  imageUrl          String?
  price             Int
  weight            Int
  tag               String
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId String

  @@map("products")
}

model OrderProduct {
  id       String  @id @default(uuid())
  imageUrl String?
  title    String
  price    Float
  count    Int
  order    Order   @relation(fields: [orderId], references: [id])
  orderId  String

  @@map("orderProducts")
}

model Order {
  id            String         @id @default(uuid())
  address       String
  products      OrderProduct[]
  cutleryCount  Int            @default(0)
  totalPrice    Float
  productsPrice Float
  deliveryPrice Float
  serviceFee    Float
  status        OrderStatus    @default(ASSEMBLY)
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime       @default(now())

  @@map("orders")
}

enum UserRole {
  USER
  ADMIN
}

enum BillingCardType {
  DEFAULT
  GOLD
}

enum OrderStatus {
  ASSEMBLY
  ON_THE_WAY
  DELIVERED
  CANCELED
}
