generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String
  hashedPassword    String
  role              UserRole          @default(USER)
  reactCoinsCount   Int               @default(0)
  phoneNumber       String?           @unique
  deliveryAddresses DeliveryAddress[]
  billingCards      BillingCard[]
  orders            Order[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("users")
}

model DeliveryAddress {
  id           String   @id @default(uuid())
  city         String
  street       String
  house        String
  entrance     Int
  floor        Int
  flatOrOffice Int
  intercom     Int?
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("deliveryAddresses")
}

model BillingCard {
  id          String          @id @default(uuid())
  number      Int[]
  cvc         Int
  expiredDate DateTime
  type        BillingCardType @default(DEFAULT)
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("billingCards")
}

model Order {
  id                   String         @id @default(uuid())
  deliveryAddress      String
  products             OrderProduct[]
  cutleryCount         Int            @default(0)
  totalCost            Float
  productsCost         Float
  deliveryCost         Float
  serviceFee           Float
  status               OrderStatus    @default(ASSEMBLY)
  recipientPhoneNumber String
  recipientName        String
  commentary           String?
  user                 User           @relation(fields: [userId], references: [id])
  userId               String
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@map("orders")
}

model OrderProduct {
  id        String   @id @default(uuid())
  title     String
  price     Float
  count     Int
  imageUrl  String?
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderProducts")
}

model ProductCategory {
  id                   String               @id @default(uuid())
  title                String
  imageUrl             String?
  productSubcategories ProductSubcategory[]
}

model ProductSubcategory {
  id                String          @id @default(uuid())
  title             String
  products          Product[]
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id])
  productCategoryId String
}

model Product {
  id                   String             @id @default(uuid())
  title                String
  description          String?
  imageUrl             String?
  price                Int
  weight               Int
  tag                  String
  productSubcategory   ProductSubcategory @relation(fields: [productSubcategoryId], references: [id])
  productSubcategoryId String
}

enum UserRole {
  USER
  ADMIN
}

enum BillingCardType {
  DEFAULT
  GOLD
}

enum OrderStatus {
  ASSEMBLY
  ON_THE_WAY
  DELIVERED
  CANCELED
}
